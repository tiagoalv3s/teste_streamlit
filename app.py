import pandas as pd
import streamlit as st
from dotenv import load_dotenv
import os
import google.generativeai as genai
from rapidfuzz import process, fuzz
from PyPDF2 import PdfReader

# Configura√ß√£o inicial do Streamlit
st.set_page_config(
    page_title="Fiscaliza√ß√£o",
    page_icon="üè¢",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de carregamento de dados
def carregar_planilha():
    try:
        df = pd.read_excel('planilha_notif.xlsx')
        if df.empty:
            st.error("A planilha est√° vazia.")
            return None
        # Padronizar os nomes das colunas
        df.columns = [col.strip().lower() for col in df.columns]
        return df
    except FileNotFoundError:
        st.error("Arquivo 'planilha_notif.xlsx' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar a planilha: {e}")
        return None

def ler_pdf():
    try:
        with open("codigo_obras.pdf", "rb") as file:
            pdf_reader = PdfReader(file)
            return " ".join([page.extract_text() for page in pdf_reader.pages])
    except FileNotFoundError:
        st.error("Arquivo 'codigo_obras.pdf' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar o c√≥digo de obras: {e}")
        return None

# Inicializa√ß√£o da API
def inicializar_api():
    load_dotenv()
    api_key = os.getenv("API_KEY")
    
    if not api_key:
        st.error("Chave da API n√£o encontrada no arquivo .env")
        return None
    
    try:
        genai.configure(api_key=api_key)
        return genai.GenerativeModel(model_name="gemini-1.5-flash")
    except Exception as e:
        st.error(f"Erro ao inicializar a API: {e}")
        return None

# Fun√ß√£o de busca inteligente em notifica√ß√µes
def buscar_notificacao(query, df, model):
    if df is None:
        return "Dados n√£o dispon√≠veis para consulta."
    
    try:
        # Converte o DataFrame para texto para contextualiza√ß√£o
        registros = df.to_dict('records')
        contexto_dados = "\n".join([
            f"Notifica√ß√£o {idx + 1}:\n"
            f"- Endere√ßo: {reg.get('endereco', 'N√£o informado')}\n"
            f"- Propriet√°rio: {reg.get('proprietario', 'N√£o informado')}\n"
            f"- Status: {reg.get('status', 'N√£o informado')}\n"
            f"- Data: {reg.get('data', 'N√£o informada')}\n"
            for idx, reg in enumerate(registros[:10])
        ])

        prompt = """
        Voc√™ √© um agente de fiscaliza√ß√£o municipal experiente. Analise a consulta do usu√°rio sobre as notifica√ß√µes 
        e forne√ßa uma resposta profissional e detalhada. Siga estas diretrizes:

        1. Identifique as informa√ß√µes mais relevantes para a consulta
        2. Organize a resposta de forma clara e estruturada
        3. Use linguagem t√©cnica apropriada
        4. Cite n√∫meros espec√≠ficos quando dispon√≠veis
        5. Sugira pr√≥ximos passos ou recomenda√ß√µes quando apropriado

        Dados das notifica√ß√µes dispon√≠veis:
        {contexto}

        Consulta do usu√°rio: {query}

        Responda como um agente de fiscaliza√ß√£o, mantendo um tom profissional e prestativo.
        """.format(contexto=contexto_dados, query=query)

        resposta = model.generate_content(prompt)
        return resposta.text if hasattr(resposta, "text") else resposta.content

    except Exception as e:
        return f"Erro ao processar a consulta: {str(e)}"

# Fun√ß√£o para consulta do c√≥digo de obras
def consultar_codigo_obras(pergunta, codigo_obras, model):
    if not model:
        return "Servi√ßo de IA n√£o dispon√≠vel no momento."
    
    if not codigo_obras:
        return "C√≥digo de obras n√£o dispon√≠vel para consulta."
    
    try:
        prompt = """
        Voc√™ √© um especialista em legisla√ß√£o municipal e c√≥digo de obras. Analise a pergunta do usu√°rio 
        e forne√ßa uma resposta t√©cnica e precisa, seguindo estas diretrizes:

        1. Cite os artigos espec√≠ficos do c√≥digo de obras relevantes √† pergunta
        2. Explique as regulamenta√ß√µes de forma clara e objetiva
        3. Use linguagem t√©cnica apropriada
        4. Forne√ßa exemplos pr√°ticos quando pertinente
        5. Indique poss√≠veis exce√ß√µes ou casos especiais
        
        C√≥digo de Obras:
        {codigo}
        
        Pergunta do usu√°rio: {pergunta}
        
        Responda como um especialista em legisla√ß√£o municipal, mantendo um tom t√©cnico e profissional.
        """.format(codigo=codigo_obras, pergunta=pergunta)
        
        resposta = model.generate_content(prompt)
        return resposta.text if hasattr(resposta, "text") else resposta.content

    except Exception as e:
        return f"Erro ao processar a consulta: {str(e)}"

# Interface principal
def main():
    st.title("Sistema de Fiscaliza√ß√£o ")
    
    # Inicializa√ß√£o dos componentes
    model = inicializar_api()
    df = carregar_planilha()
    codigo_obras = ler_pdf()
    
    # Tabs principais
    tab1, tab2 = st.tabs(["NOTIFICA√á√ïES", "C√ìDIGO DE OBRAS"])
    
    # Tab de Notifica√ß√µes
    with tab1:
        st.header("Consulta de Notifica√ß√µes")
        st.markdown("""
        Digite sua consulta sobre notifica√ß√µes. Voc√™ pode perguntar sobre:
        - Endere√ßos espec√≠ficos
        - Status de notifica√ß√µes
        - Informa√ß√µes sobre propriet√°rios
        - Datas de notifica√ß√µes
        """)
        
        query = st.text_area("Digite sua consulta:")
        
        if st.button("Buscar", key="buscar_notificacao"):
            if query:
                with st.spinner("Analisando sua consulta..."):
                    resposta = buscar_notificacao(query, df, model)
                    st.markdown("### Resultado da Consulta")
                    st.write(resposta)
            else:
                st.warning("Por favor, digite sua consulta.")
    
    # Tab do C√≥digo de Obras
    with tab2:
        st.header("Consulta ao C√≥digo de Obras")
        st.markdown("""
        Digite sua pergunta sobre o c√≥digo de obras. Voc√™ pode perguntar sobre:
        - Regulamenta√ß√µes espec√≠ficas
        - Requisitos de constru√ß√£o
        - Procedimentos de aprova√ß√£o
        - Normas t√©cnicas
        """)
        
        pergunta = st.text_area("Digite sua pergunta:")
        
        if st.button("Consultar", key="consultar_codigo"):
            if pergunta:
                with st.spinner("Analisando sua pergunta..."):
                    resposta = consultar_codigo_obras(pergunta, codigo_obras, model)
                    st.markdown("### Resposta")
                    st.write(resposta)
            else:
                st.warning("Por favor, digite uma pergunta para consultar.")

if __name__ == "__main__":
    main()