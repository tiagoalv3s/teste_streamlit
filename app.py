import pandas as pd
import streamlit as st
from dotenv import load_dotenv
import os
import google.generativeai as genai
from rapidfuzz import process, fuzz
from PyPDF2 import PdfReader

# [C√≥digo anterior mantido at√© a fun√ß√£o buscar_notificacao]

# Nova fun√ß√£o de busca inteligente em notifica√ß√µes
def buscar_notificacao(query, df, model):
    if df is None or model is None:
        return "Sistema indispon√≠vel no momento."
    
    try:
        # Preparar dados para an√°lise
        dados_formatados = []
        for _, row in df.iterrows():
            dados_formatados.append({
                'endereco': str(row.get('Endereco', '')),
                'proprietario': str(row.get('Proprietario', '')),
                'status': str(row.get('Status', '')),
                'data': str(row.get('Data', '')),
                'setor': str(row.get('Setor', '')),
                'artigo': str(row.get('Artigo', '')),
                'observacao': str(row.get('Observacao', ''))
            })

        # Criar contexto para a IA
        prompt = f"""
        Voc√™ √© um assistente especializado em fiscaliza√ß√£o municipal. Analise os dados das notifica√ß√µes e responda √† consulta do usu√°rio.
        
        Consulta do usu√°rio: {query}
        
        Dados dispon√≠veis das notifica√ß√µes:
        {str(dados_formatados)}
        
        Instru√ß√µes:
        1. Analise a consulta e os dados dispon√≠veis
        2. Identifique padr√µes e informa√ß√µes relevantes
        3. Forne√ßa um resumo estruturado das informa√ß√µes encontradas
        4. Se a consulta mencionar um setor, endere√ßo, ou propriet√°rio espec√≠fico, foque nesses dados
        5. Inclua estat√≠sticas relevantes quando apropriado
        6. Se n√£o encontrar dados espec√≠ficos, forne√ßa informa√ß√µes gerais relacionadas
        7. Organize a resposta de forma clara e profissional
        8. Caso n√£o encontre informa√ß√µes relacionadas, indique isso claramente
        
        Por favor, forne√ßa uma resposta detalhada e √∫til.
        """

        # Gerar resposta
        resposta = model.generate_content(prompt)
        if not hasattr(resposta, "content"):
            return "N√£o foi poss√≠vel gerar uma resposta adequada."
            
        # Processar e formatar a resposta
        texto_resposta = resposta.content.strip()
        
        # Adicionar cabe√ßalho informativo
        return f"""### Resultado da An√°lise

{texto_resposta}

---
*Nota: Esta an√°lise foi gerada com base nos dados dispon√≠veis no sistema.*
"""

    except Exception as e:
        return f"""### Erro na Consulta

Ocorreu um erro ao processar sua consulta: {str(e)}

Por favor, tente reformular sua pergunta ou entre em contato com o suporte t√©cnico se o problema persistir."""

# [Resto do c√≥digo mantido como estava]

# Modifica√ß√£o na interface principal (dentro da fun√ß√£o main())
def main():
    st.title("Fiscaliza√ß√£o - PMT")
    
    # Inicializa√ß√£o dos componentes
    model = inicializar_api()
    df = carregar_planilha()
    codigo_obras = ler_pdf()
    
    # Tabs principais
    tab1, tab2 = st.tabs(["NOTIFICA√á√ïES", "C√ìDIGO DE OBRAS"])
    
    # Tab de Notifica√ß√µes
    with tab1:
        st.header("Consulta de notifica√ß√µes")
        
        # Adicionar exemplos de consultas
        with st.expander("üìù Exemplos de consultas"):
            st.markdown("""
            - "Mostre todas as notifica√ß√µes do Setor 1"
            - "Quantas notifica√ß√µes existem no status pendente?"
            - "Quais s√£o as notifica√ß√µes mais recentes?"
            - "Resumo das notifica√ß√µes por setor"
            - "Buscar notifica√ß√µes do propriet√°rio Jo√£o"
            - "Notifica√ß√µes da Rua Principal"
            """)
        
        query = st.text_area(
            "Digite sua consulta:",
            placeholder="Ex: Mostre todas as notifica√ß√µes do Setor 1",
            help="Voc√™ pode perguntar sobre setores, endere√ßos, propriet√°rios, status, etc."
        )
        
        if st.button("Buscar", key="buscar_notificacao"):
            if query:
                with st.spinner("Analisando dados e gerando resposta..."):
                    resposta = buscar_notificacao(query, df, model)
                    st.markdown(resposta)
            else:
                st.warning("Por favor, digite sua consulta.")
    
    # [Resto do c√≥digo mantido como estava]

if __name__ == "__main__":
    main()