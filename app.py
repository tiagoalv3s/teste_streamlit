import pandas as pd
import streamlit as st
from dotenv import load_dotenv
import os
import google.generativeai as genai
from rapidfuzz import process, fuzz
from PyPDF2 import PdfReader

# Configura√ß√£o inicial do Streamlit
st.set_page_config(
    page_title="Fiscaliza√ß√£o",
    page_icon="üè¢",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de carregamento de dados
def carregar_planilha():
    try:
        df = pd.read_excel('planilha_notif.xlsx')
        if df.empty:
            st.error("A planilha est√° vazia.")
            return None
        return df
    except FileNotFoundError:
        st.error("Arquivo 'planilha_notif.xlsx' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar a planilha: {e}")
        return None

def ler_pdf():
    try:
        with open("codigo_obras.pdf", "rb") as file:
            pdf_reader = PdfReader(file)
            return " ".join([page.extract_text() for page in pdf_reader.pages])
    except FileNotFoundError:
        st.error("Arquivo 'codigo_obras.pdf' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar o c√≥digo de obras: {e}")
        return None

# Inicializa√ß√£o da API
def inicializar_api():
    load_dotenv()
    api_key = os.getenv("API_KEY")
    
    if not api_key:
        st.error("Chave da API n√£o encontrada no arquivo .env")
        return None
    
    try:
        genai.configure(api_key=api_key)
        return genai.GenerativeModel(model_name="gemini-1.5-flash")
    except Exception as e:
        st.error(f"Erro ao inicializar a API: {e}")
        return None

# Fun√ß√£o de busca inteligente em notifica√ß√µes
def buscar_notificacao(query, df, model):
    if df is None:
        return "Dados n√£o dispon√≠veis para consulta."
    
    try:
        # Converte o DataFrame para texto para contextualiza√ß√£o
        registros = df.to_dict('records')
        contexto_dados = "\n".join([
            f"Notifica√ß√£o: Endere√ßo: {reg['Endereco']}, "
            f"Propriet√°rio: {reg.get('Proprietario', 'N√£o informado')}, "
            f"Status: {reg.get('Status', 'N√£o informado')}, "
            f"Data: {reg.get('Data', 'N√£o informada')}"
            for reg in registros[:10]  # Limita a 10 registros para n√£o sobrecarregar
        ])

        prompt = (
            "Voc√™ √© um especialista em fiscaliza√ß√£o municipal. "
            "Com base nos dados das notifica√ß√µes abaixo, "
            "analise a consulta do usu√°rio e forne√ßa informa√ß√µes relevantes "
            "de forma clara e objetiva. Se encontrar registros relacionados, "
            "detalhe as informa√ß√µes encontradas.\n\n"
            f"Dados das notifica√ß√µes:\n{contexto_dados}\n\n"
            f"Consulta do usu√°rio: {query}\n\n"
            "Por favor, forne√ßa uma resposta detalhada e profissional, "
            "incluindo todas as informa√ß√µes relevantes encontradas."
        )

        resposta = model.generate_content(prompt)
        return resposta.content.strip() if hasattr(resposta, "content") else "N√£o foi poss√≠vel processar a consulta."
    except Exception as e:
        return f"Erro ao processar a consulta: {str(e)}"

# Fun√ß√£o para consulta do c√≥digo de obras (mantida como estava)
def consultar_codigo_obras(pergunta, codigo_obras, model):
    if not model:
        return "Servi√ßo de IA n√£o dispon√≠vel no momento."
    
    if not codigo_obras:
        return "C√≥digo de obras n√£o dispon√≠vel para consulta."
    
    try:
        prompt = (
            "Voc√™ √© um especialista em legisla√ß√£o municipal e c√≥digo de obras."
            "Por favor, analise o seguinte c√≥digo de obras e responda √† pergunta."
            "de forma clara, objetiva e t√©cnica, citando os artigos relevantes quando aplic√°vel.\n\n"
            f"C√≥digo de Obras:\n{codigo_obras}\n\n"
            f"Pergunta: {pergunta}\n"
        )
        
        resposta = model.generate_content(prompt)
        if hasattr(resposta, "text"):
            return resposta.text
        elif hasattr(resposta, "content"):
            return resposta.content
        else:
            return "N√£o foi poss√≠vel gerar uma resposta adequada."
    except Exception as e:
        return f"Erro ao processar a consulta: {str(e)}"

# Interface principal
def main():
    st.title("Fiscaliza√ß√£o - PMT")
    
    # Inicializa√ß√£o dos componentes
    model = inicializar_api()
    df = carregar_planilha()
    codigo_obras = ler_pdf()
    
    # Tabs principais
    tab1, tab2 = st.tabs(["NOTIFICA√á√ïES", "C√ìDIGO DE OBRAS"])
    
    # Tab de Notifica√ß√µes
    with tab1:
        st.header("Consulta de notifica√ß√µes")
        query = st.text_area("Digite sua consulta (endere√ßo, propriet√°rio, status, etc.):")
        
        if st.button("Buscar", key="buscar_notificacao"):
            if query:
                with st.spinner("Analisando sua consulta..."):
                    resposta = buscar_notificacao(query, df, model)
                    st.write(resposta)
            else:
                st.warning("Por favor, digite sua consulta.")
    
    # Tab do C√≥digo de Obras
    with tab2:
        st.header("C√≥digo de Obras")
        pergunta = st.text_area("Digite sua pergunta sobre o c√≥digo de obras:")
        
        if st.button("Consultar", key="consultar_codigo"):
            if pergunta:
                with st.spinner("Analisando sua pergunta..."):
                    resposta = consultar_codigo_obras(pergunta, codigo_obras, model)
                    st.write(resposta)
            else:
                st.warning("Por favor, digite uma pergunta para consultar.")

if __name__ == "__main__":
    main()