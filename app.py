import pandas as pd
import streamlit as st
from dotenv import load_dotenv
import os
import google.generativeai as genai
from rapidfuzz import process, fuzz
from PyPDF2 import PdfReader

# Configura√ß√£o inicial do Streamlit
st.set_page_config(
    page_title="Sistema de Fiscaliza√ß√£o",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes de carregamento de dados
def carregar_planilha():
    try:
        df = pd.read_excel('planilha_notif.xlsx')
        if df.empty:
            st.error("A planilha est√° vazia.")
            return None
        return df
    except FileNotFoundError:
        st.error("Arquivo 'planilha_notif.xlsx' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar a planilha: {e}")
        return None

def ler_pdf():
    try:
        with open("codigo_obras.pdf", "rb") as file:
            pdf_reader = PdfReader(file)
            return " ".join([page.extract_text() for page in pdf_reader.pages])
    except FileNotFoundError:
        st.error("Arquivo 'codigo_obras.pdf' n√£o encontrado.")
        return None
    except Exception as e:
        st.error(f"Erro ao carregar o c√≥digo de obras: {e}")
        return None

# Inicializa√ß√£o da API
def inicializar_api():
    load_dotenv()
    api_key = os.getenv("API_KEY")
    
    if not api_key:
        st.error("Chave da API n√£o encontrada no arquivo .env")
        return None
    
    try:
        genai.configure(api_key=api_key)
        return genai.GenerativeModel(model_name="gemini-1.5-flash")
    except Exception as e:
        st.error(f"Erro ao inicializar a API: {e}")
        return None

# Fun√ß√£o de busca
def buscar_com_fuzzy(nome, coluna, df, limite_score=60):
    if df is None:
        return None, "Dados n√£o dispon√≠veis"
    
    try:
        valores_unicos = df[coluna].dropna().unique()
        if not valores_unicos.size:
            return None, "N√£o h√° dados dispon√≠veis para busca."
            
        correspondencia = process.extractOne(nome, valores_unicos, scorer=fuzz.ratio)
        if correspondencia and correspondencia[1] >= limite_score:
            return df[df[coluna] == correspondencia[0]], None
        return None, "Nenhuma correspond√™ncia encontrada com similaridade suficiente."
    except Exception as e:
        return None, f"Erro na busca: {str(e)}"

# Fun√ß√£o para gerar respostas
def resposta_humanizada(contexto, model):
    if model is None:
        return "Servi√ßo de IA n√£o dispon√≠vel no momento."
    
    try:
        prompt = f"{contexto}\nPor favor, forne√ßa uma explica√ß√£o clara e objetiva sobre essas informa√ß√µes."
        resposta = model.generate_content(prompt)
        return resposta.content.strip() if hasattr(resposta, "content") else "Conte√∫do n√£o dispon√≠vel."
    except Exception as e:
        return f"Erro ao gerar resposta: {str(e)}"

# Fun√ß√£o espec√≠fica para consulta do c√≥digo de obras
def consultar_codigo_obras(pergunta, codigo_obras, model):
    if not model:
        return "Servi√ßo de IA n√£o dispon√≠vel no momento."
    
    if not codigo_obras:
        return "C√≥digo de obras n√£o dispon√≠vel para consulta."
    
    try:
        prompt = (
            "Voc√™ √© um especialista em legisla√ß√£o municipal e c√≥digo de obras. "
            "Por favor, analise o seguinte c√≥digo de obras e responda √† pergunta "
            "de forma clara, objetiva e t√©cnica, citando os artigos relevantes quando aplic√°vel.\n\n"
            f"C√≥digo de Obras:\n{codigo_obras}\n\n"
            f"Pergunta: {pergunta}\n"
        )
        
        resposta = model.generate_content(prompt)
        if hasattr(resposta, "text"):
            return resposta.text
        elif hasattr(resposta, "content"):
            return resposta.content
        else:
            return "N√£o foi poss√≠vel gerar uma resposta adequada."
    except Exception as e:
        return f"Erro ao processar a consulta: {str(e)}"

# Interface principal
def main():
    st.title("Sistema de Fiscaliza√ß√£o - PMT")
    
    # Inicializa√ß√£o dos componentes
    model = inicializar_api()
    df = carregar_planilha()
    codigo_obras = ler_pdf()
    
    # Tabs principais
    tab1, tab2 = st.tabs(["Consulta de Im√≥vel", "C√≥digo de Obras"])
    
    # Tab de Consulta de Im√≥vel
    with tab1:
        st.header("Consulta de Im√≥vel")
        endereco = st.text_input("Digite o endere√ßo do im√≥vel:")
        
        if st.button("Buscar", key="buscar_endereco"):
            if endereco:
                resultado, msg = buscar_com_fuzzy(endereco, 'Endereco', df)
                if resultado is not None:
                    registro = resultado.iloc[0]
                    
                    # Exibi√ß√£o dos resultados
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("Dados do Im√≥vel")
                        st.write(f"**Endere√ßo:** {registro['Endereco']}")
                        st.write(f"**Propriet√°rio:** {registro.get('Proprietario', 'N√£o informado')}")
                        
                    with col2:
                        st.subheader("Informa√ß√µes da Fiscaliza√ß√£o")
                        st.write(f"**Status:** {registro.get('Status', 'N√£o informado')}")
                        st.write(f"**Data:** {registro.get('Data', 'N√£o informada')}")
                    
                    # An√°lise do caso
                    st.subheader("An√°lise do Caso")
                    contexto = f"Im√≥vel localizado em {registro['Endereco']}, " \
                             f"propriedade de {registro.get('Proprietario', 'propriet√°rio n√£o informado')}, " \
                             f"com status {registro.get('Status', 'n√£o informado')}."
                    
                    with st.spinner("Gerando an√°lise..."):
                        analise = resposta_humanizada(contexto, model)
                        st.write(analise)
                else:
                    st.warning(msg)
            else:
                st.warning("Por favor, digite um endere√ßo para buscar.")
    
    # Tab do C√≥digo de Obras
    with tab2:
        st.header("C√≥digo de Obras")
        pergunta = st.text_area("Digite sua pergunta sobre o c√≥digo de obras:")
        
        if st.button("Consultar", key="consultar_codigo"):
            if pergunta:
                with st.spinner("Analisando sua pergunta..."):
                    resposta = consultar_codigo_obras(pergunta, codigo_obras, model)
                    st.write(resposta)
            else:
                st.warning("Por favor, digite uma pergunta para consultar.")

if __name__ == "__main__":
    main()